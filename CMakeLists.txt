PROJECT(LIBEASTWOOD)
SET( PACKAGE "libeastwood" )
SET( CMAKE_MODULE_PATH ${LIBEASTWOOD_SOURCE_DIR}/cmake/modules )
cmake_minimum_required(VERSION 2.6)


SET(LIBEASTWOOD_MAJOR "1")
SET(LIBEASTWOOD_MINOR "0")
SET(LIBEASTWOOD_PATCH "0")
SET(VERSION "0.3.1")


SET ( CMAKE_CXX_FLAGS -std=gnu++1y)

IF(NOT MSVC)
  SET( WARN_FLAGS "-Wall -Wgnu-zero-variadic-macro-arguments -Wno-variadic-macros" )
  SET( WARN_FLAGS_DEBUG "-Wextra -Weffc++ -pedantic -Wold-style-cast -Woverloaded-virtual -Wctor-dtor-privacy -Wreorder -Wabi -Wstrict-null-sentinel -Wc++0x-compat -Wformat=2 -Winit-self -Wswitch-default -Wsign-conversion -Wlogical-op -Wmissing-declarations -Wmissing-noreturn -Wmissing-format-attribute -Wredundant-decls -Winline" )
  # Don't enable these for now, but leave them around to investigate closer later
  SET( WARN_FLAGS_DEBUG_EXCESSIVE "-Wpadded -Wunreachable-code -Wconversion" )
  SET( CMAKE_CXX_FLAGS "${WARN_FLAGS} -fPIC ${CMAKE_CXX_FLAGS}" )
  SET( CMAKE_CXX_FLAGS_DEBUG "${WARN_FLAGS_DEBUG} -g -O0 ${CMAKE_CXX_FLAGS_DEBUG}" )
ENDIF(NOT MSVC)

SET( LIBEASTWOOD_VERSION_INFO "${VERSION}" )
SET( LIBEASTWOOD_SOVERSION_INFO "${LIBEASTWOOD_MAJOR}.${LIBEASTWOOD_MINOR}.${LIBEASTWOOD_PATCH}" )

SET(CPACK_PACKAGE_VERSION, "${VERSION}")

SET(CPACK_SOURCE_IGNORE_FILES ".bzr" "build" ".swp$" ".*~" )

SET( CPACK_PACKAGE_NAME, "${PACKAGE}" )
SET( CPACK_SOURCE_GENERATOR "TGZ;TXZ")
SET( CPACK_SOURCE_PACKAGE_FILE_NAME "${PACKAGE}-${VERSION}" )

INCLUDE(CPack)

IF( NOT DEFINED LIBEASTWOOD_BUILD_SDL )
  SET( LIBEASTWOOD_BUILD_SDL ON )
ENDIF( NOT DEFINED LIBEASTWOOD_BUILD_SDL )

IF( NOT DEFINED CMAKE_INSTALL_PREFIX )
  SET( CMAKE_INSTALL_PREFIX /usr/local )
ENDIF( NOT DEFINED CMAKE_INSTALL_PREFIX )

IF ( NOT DEFINED CMAKE_INSTALL_LIBDIR )
  SET ( CMAKE_INSTALL_LIBDIR ${CMAKE_INSTALL_PREFIX}/lib )
ENDIF ( NOT DEFINED CMAKE_INSTALL_LIBDIR )

IF(LIBEASTWOOD_BUILD_SDL)
FIND_PACKAGE(SDL REQUIRED)
IF ( NOT SDL_FOUND)
  MESSAGE( FATAL_ERROR " SDL-devel not found" )
ELSE ( NOT SDL_FOUND)
  INCLUDE_DIRECTORIES(${SDL_INCLUDE_DIR})
ENDIF( NOT SDL_FOUND)

FIND_PACKAGE(SDL_mixer REQUIRED)
IF ( NOT SDLMIXER_FOUND)
  MESSAGE( FATAL_ERROR " SDL_mixer-devel not found" )
ELSE ( NOT SDLMIXER_FOUND)
  INCLUDE_DIRECTORIES(${SDLMIXER_INCLUDE_DIR})
ENDIF( NOT SDLMIXER_FOUND)
ENDIF(LIBEASTWOOD_BUILD_SDL)

FIND_PACKAGE(LibSamplerate REQUIRED)
IF ( NOT LIBSAMPLERATE_FOUND)
  MESSAGE( FATAL_ERROR " libsamplerate-devel not found" )
ELSE ( NOT LIBSAMPLERATE_FOUND)
  INCLUDE_DIRECTORIES(${LIBSAMPLERATE_INCLUDE_DIRS})
ENDIF( NOT LIBSAMPLERATE_FOUND)

MESSAGE(STATUS "soname: ${LIBEASTWOOD_SOVERSION_INFO}")
MESSAGE(STATUS "version: ${VERSION}")

OPTION(LIBEASTWOOD_BUILD_PYTHON
  "Build python module."
  OFF)
IF(LIBEASTWOOD_BUILD_PYTHON)
    FIND_PACKAGE(PythonInterp REQUIRED)
    FIND_PACKAGE(PythonLibs REQUIRED)
ENDIF(LIBEASTWOOD_BUILD_PYTHON)

CONFIGURE_FILE(${LIBEASTWOOD_SOURCE_DIR}/libeastwood.pc.in ${LIBEASTWOOD_BINARY_DIR}/libeastwood.pc @ONLY)
INSTALL( FILES ${LIBEASTWOOD_BINARY_DIR}/libeastwood.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig )

INSTALL( FILES ${LIBEASTWOOD_SOURCE_DIR}/cmake/modules/FindLibEastwood.cmake DESTINATION ${CMAKE_INSTALL_PREFIX}/share/cmake/Modules )

ADD_SUBDIRECTORY( src )
ADD_SUBDIRECTORY( include )
IF(LIBEASTWOOD_BUILD_PYTHON)
ADD_SUBDIRECTORY( python )
ENDIF(LIBEASTWOOD_BUILD_PYTHON)

